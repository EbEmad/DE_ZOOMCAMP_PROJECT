services:
  kafka:
    build:
      context: ./services/kafka
      dockerfile: Dockerfile
    image: my-kafka-custom
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_LOG_DIRS=/bitnami/kafka/data
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --list --bootstrap-server kafka:9092 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    volumes:
      - ./kafka/create-topics.sh:/create-topics.sh
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "/opt/bitnami/scripts/kafka/run.sh & 
      sleep 10; 
      /create-topics.sh; 
      wait"
    networks:
      - realtime
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    ports:
      - "8085:8080"
    depends_on:
      - kafka
    networks:
      - real-time

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: test
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - realtime
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    networks:
      - realtime

  webserver:
    build:
      context: ./services/airflow
      dockerfile: Dockerfile
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__WEBSERVER__SECRET_KEY=mysecretkey
      - AIRFLOW__CORE__FERNET_KEY=GgyJ5jUehSy2zQqY958eUWW1ezEgNp4OerBy-AKuD14=
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=test
      - KAFKA_TOPIC=ETL-PROJECT
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./Data:/opt/airflow/data
      - ./scripts:/opt/airflow/scripts
    ports:
      - "8080:8080"
    entrypoint: /run.sh
    command: webserver
    networks:
      - realtime

  scheduler:
    build:
      context: ./services/airflow
      dockerfile: Dockerfile
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__WEBSERVER__SECRET_KEY=mysecretkey
      - AIRFLOW__CORE__FERNET_KEY=GgyJ5jUehSy2zQqY958eUWW1ezEgNp4OerBy-AKuD14=
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=test
      - KAFKA_TOPIC=ETL-PROJECT
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./Data:/opt/airflow/data
      - ./scripts:/opt/airflow/scripts
    entrypoint: /run.sh
    command: scheduler
    networks:
      - realtime
  
  terraform:
    build:
      context: ./services/terraform
      dockerfile: Dockerfile
    image: ubuntu:latest
    container_name: terraform
    volumes:
      - ./services/terraform:/terraform
      - ./data:/terraform/data
    working_dir: /terraform
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - ./services/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./services/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./services/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - postgres
    networks:
      - real-time
networks:
  realtime:
    driver: bridge